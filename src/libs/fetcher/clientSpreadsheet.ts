import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { GOOGLE_SPREADSHEET_VARIANT } from '@/libs/handles';

const CREDENTIALS = JSON.parse(process.env.GOOGLE_APPLICATION_CREDENTIALS as string);

const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: CREDENTIALS.client_email,
    key: CREDENTIALS.private_key,
    scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
    ],
});

export type ClientSpreadsheetProps = {
    type: typeof GOOGLE_SPREADSHEET_VARIANT[keyof typeof GOOGLE_SPREADSHEET_VARIANT]
}

export const clientSpreadsheet = async ({ type }: ClientSpreadsheetProps) => {
    const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID as string, serviceAccountAuth);
    await doc.loadInfo();

    const sheet = doc.sheetsByTitle[type];
    const rows = await sheet.getRows();
    const headers = sheet.headerValues;

    const data: any[] = [];

    rows.map((row: any) => {
        const tempItem: Object = {};

        headers.map((key: string) => {
            tempItem[key as keyof Object] = row?.get(key) ?? '';
        });

        data.push(tempItem);
    });

    return data;
};